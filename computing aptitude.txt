*#include <iostream>
#include <vector>
#include <string>
#include <iomanip>

using namespace std;

// Structure to represent an expense
struct Expense {
    string category;
    string description;
    double amount;
};

// Function to display the main menu
void displayMenu() {
    cout << "\n--- Expense Tracker ---\n";
    cout << "1. Add Expense\n";
    cout << "2. View Expenses\n";
    cout << "3. Delete Expense\n";
    cout << "4. Exit\n";
    cout << "Enter your choice: ";
}

// Function to display all expenses
void displayExpenses(const vector<Expense>& expenses) {
    cout << "\n--- Your Expenses ---\n";
    if (expenses.empty()) {
        cout << "No expenses recorded yet.\n";
    } else {
        double total = 0;
        cout << left << setw(15) << "Category" << setw(30) << "Description" << setw(10) << "Amount\n";
        cout << "---------------------------------------------------------------\n";
        for (size_t i = 0; i < expenses.size(); ++i) {
            cout << left << setw(15) << expenses[i].category << setw(30) << expenses[i].description << setw(10) << expenses[i].amount << "\n";
            total += expenses[i].amount;
        }
        cout << "---------------------------------------------------------------\n";
        cout << "Total expenses: $" << total << "\n";
    }
}

// Function to add an expense
void addExpense(vector<Expense>& expenses) {
    Expense expense;
    cout << "Enter the category (e.g., Food, Transport, Others): ";
    cin >> ws; // Ignore leading whitespaces
    getline(cin, expense.category);
    cout << "Enter the description: ";
    getline(cin, expense.description);
    cout << "Enter the amount: $";
    cin >> expense.amount;

    expenses.push_back(expense);
    cout << "Expense added successfully!\n";
}

// Function to delete an expense
void deleteExpense(vector<Expense>& expenses) {
    if (expenses.empty()) {
        cout << "No expenses to delete.\n";
        return;
    }

    displayExpenses(expenses);
    int index;
    cout << "Enter the index number of the expense you want to delete (starting from 1): ";
    cin >> index;

    if (index > 0 && index <= expenses.size()) {
        expenses.erase(expenses.begin() + (index - 1));
        cout << "Expense deleted successfully!\n";
    } else {
        cout << "Invalid index. Please try again.\n";
    }
}

int main() {
    vector<Expense> expenses;
    int choice;
    bool running = true;

    while (running) {
        displayMenu();
        cin >> choice;

        switch (choice) {
            case 1:
                addExpense(expenses);
                break;
            case 2:
                displayExpenses(expenses);
                break;
            case 3:
                deleteExpense(expenses);
                break;
            case 4:
                running = false;
                cout << "Exiting the expense tracker. Goodbye!\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}*